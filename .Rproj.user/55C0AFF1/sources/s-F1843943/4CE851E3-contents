library(MASS)
library(expm)
library(symmoments)

p <- 2
n <- 10000
sig <- matrix(c(1,0,0,1),2,2)
ms <- 3
mk <- 61
Sigma <- matrix(c(1,0.5,0.5,1),2,2)

gaussnonr <- function(p,n,ms,mk,sig,Sigma,initial=NULL) {
  # sig - p*p Multivariate normal covariance matrix 
  # Sigma - p*p Desired result covariance matrix
  
  if (is.null(initial))
    initial <- c(0.9, 0.4, 0)
  siglower <- sig[lower.tri(sig,diag=TRUE)]
  
  decito13 <- function(n,p){
    result <- rep(0,p)
    temp <- n
    for (i in 1:(p-1)){
      result[i] <- temp %/% (13^(p-i))
      temp <- temp-(13^(p-1)*result[i])
    }
    result[p] <- n %% 13
    return(result)
  }
  
  todeci <- function(a){
    p <- length(a)
    f <- rep(0,p)
    for (i in 1:p) 
      f[i] <- 13^(p-i)
    return(sum(a*f))
  }
  
  Astore <- rep(0,13^p)
  for (i in 0:(13^p-1)) {
    comb <- decito13(i,p)
    combsum <- sum(comb)
    if ((combsum<=12) & (combsum %% 2 == 0))
      Astore[i+1] <- evaluate(callmultmoments(comb),siglower)
  }
  
  gauss_v <- function(p,sig,b,c,d) {
    S <- matrix(0,p,p)
    a <- -c    # SCALE
    abcd <- c(a,b,c,d)
    siglower <- sig[lower.tri(sig,diag=TRUE)]
    for (i in 1:p)
      for (j in 1:p)
        for (ii in 1:4)
          for (jj in 1:4)
            if ((ii+jj) %% 2 == 0) {
              xx <- rep(0,p)
              xx[i] <- xx[i]+(ii-1)
              xx[j] <- xx[j]+(jj-1)
              S[i,j] <- S[i,j] + abcd[ii]*abcd[jj]*
                evaluate(callmultmoments(xx),siglower)
            }
    V <- solve(S)
    V
  }
  
  gauss_skew <- function(Astore,p,sig,b,c,d) {
    A <- array(0,c(p,p,p))
    a <- -c
    abcd <- c(a,b,c,d)
    V <- gauss_v(p,sig,b,c,d)
    for (i in 1:p)
      for (j in 1:p)
        for (k in 1:p)
          if (identical( c(i,j,k), sort(c(i,j,k)) )) {
            for (ii in 1:4)
              for (jj in 1:4)
                for (kk in 1:4)
                  if ((ii+jj+kk) %% 2 == 1) {
                    xx <- rep(0,p)
                    xx[i] <- xx[i]+(ii-1)
                    xx[j] <- xx[j]+(jj-1)
                    xx[k] <- xx[k]+(kk-1)
                    A[i,j,k] <- A[i,j,k] + abcd[ii]*abcd[jj]*abcd[kk]*Astore[todeci(xx)+1]
                  }
          } else {
            st <- sort(c(i,j,k))
            A[i,j,k] = A[st[1],st[2],st[3]]
          }
    skew <- 0
    for (i in 1:p)
      for (j in 1:p)
        for (i1 in 1:p)
          for (j1 in 1:p)
            for (i2 in 1:p)
              for (j2 in 1:p)
                skew <- skew + V[i,j]*V[i1,j1]*V[i2,j2]* 
      A[i,i1,i2]*A[j,j1,j2]
    return(skew)
  }
  
  gauss_kurt <- function(Astore,p,sig,b,c,d) {
    A <- array(0,c(p,p,p,p))
    a <- -c
    abcd <- c(a,b,c,d)
    V <- gauss_v(p,sig,b,c,d)
    for (i in 1:p)
      for (j in 1:p)
        for (k in 1:p)
          for (l in 1:p)
            if (identical( c(i,j,k,l), sort(c(i,j,k,l)) )) {
              for (ii in 1:4)
                for (jj in 1:4)
                  for (kk in 1:4)
                    for (ll in 1:4)
                      if ((ii+jj+kk+ll) %% 2 == 0) {
                        xx <- rep(0,p)
                        xx[i] <- xx[i]+(ii-1)
                        xx[j] <- xx[j]+(jj-1)
                        xx[k] <- xx[k]+(kk-1)
                        xx[l] <- xx[l]+(ll-1)
                        A[i,j,k,l] <- A[i,j,k,l] + abcd[ii]*abcd[jj]*abcd[kk]*abcd[ll]*Astore[todeci(xx)+1]
                      }
            } else {
              st <- sort(c(i,j,k,l))
              A[i,j,k,l] = A[st[1],st[2],st[3],st[4]]
            }
  kurt <- 0
  for (i in 1:p)
    for (j in 1:p)
      for (i1 in 1:p)
        for (j1 in 1:p)
          kurt <- kurt + V[i,j]*V[i1,j1]*A[i,i1,j,j1]
  return(kurt)
  }
  
  optimtarget_gauss <- function(x, a){
    ##Revised Fleishman method
    b = x[1]
    c = x[2]
    d = x[3]
    g1 = a[[1]][1]
    g2 = a[[1]][2]
    p = a[[1]][3]
    sig = a[[2]]
    Astore <- a[[3]]
    z = 
      (1 - (b^2+2*c^2+6*b*d+15*d^2))^2 +
      (g1 - gauss_skew(Astore,p,sig,b,c,d))^2 +
      (g2 - gauss_kurt(Astore,p,sig,b,c,d))^2
  }
  
  findcoe_gauss = function(canshu,initial){
    ##
    #Uses the built in minimization function to solve for b, c, and d#
    # if the third and fourth moment of ksi are given.
    ##
    output = optim(initial,optimtarget_gauss,a = canshu,method = "BFGS",
                   control = list(ndeps = rep(1e-10, 3),reltol = 1e-10,maxit = 1e8))$par
    
    return(output)
  }
  
  a = list(c(ms,mk,p),sig,Astore)
  bcd = findcoe_gauss(a,initial)
  Z = mvrnorm(n,rep(0,p),sig)
  b = bcd[1]
  c = bcd[2]
  d = bcd[3]
  xi = -c+b*Z+c*Z^2+d*Z^3
  V = gauss_v(p,sig,b,c,d)
  V_h = sqrtm(V)
  eta = matrix(0, nrow = n, ncol = p)
  for (j in 1:n){
    for(m in 1:p){
      for(i in 1:p){
        eta[j,m] = eta[j,m] + V_h[i,m] * xi[j,i]}}}
  #  eta = V_h %*% t(xi)
  x = matrix(0, nrow = n, ncol = p)
  r = chol(Sigma)
  
  for (j in 1:n){
    for(m in 1:p){
      for(i in 1:p){
        x[j,m] = x[j,m] + r[i,m] * eta[j,i]}}}
  #  x = t(r %*% eta)
  return(x)
}




sig <- matrix(c(1,0,0,1),2,2)
a = list(c(ms=3,mk=10.4,p),sig,Astore)
bcd = findcoe_gauss(a,initial)
gauss_skew(Astore,p,sig,bcd[1],bcd[2],bcd[3])    # 3
gauss_kurt(Astore,p,sig,bcd[1],bcd[2],bcd[3])    # 10

a = list(c(ms=3,mk=9,p),sig,Astore)
bcd = findcoe_gauss(a,initial)
gauss_skew(Astore,p,sig,bcd[1],bcd[2],bcd[3])    # 2.526839
gauss_kurt(Astore,p,sig,bcd[1],bcd[2],bcd[3])    # 9.350857

sig <- matrix(c(1,0.5,0.5,1),2,2)
Astore <- ...
a = list(c(ms=3,mk=10,p),sig,Astore)
bcd = findcoe_gauss(a,initial)
gauss_skew(Astore,p,sig,bcd[1],bcd[2],bcd[3])    # 2.460823
gauss_kurt(Astore,p,sig,bcd[1],bcd[2],bcd[3])    # 10.3125

a = list(c(ms=3,mk=9,p),sig,Astore)
bcd = findcoe_gauss(a,initial)
gauss_skew(Astore,p,sig,bcd[1],bcd[2],bcd[3])    # 2.026953
gauss_kurt(Astore,p,sig,bcd[1],bcd[2],bcd[3])    # 9.563976


# 这里开始用不同的b,c,d作用于不用的Z
#
#
#

initial <- c(0.9, 0.4, 0, 0.9, 0.4, 0)

gauss_v <- function(p,sig,para) {
  # para为(p*3)维的向量
  bcd <- matrix(para, nrow = p, ncol = 3,byrow = TRUE)
  abcd <- cbind(-bcd[,2],bcd)
  S <- matrix(0,p,p)
  siglower <- sig[lower.tri(sig,diag=TRUE)]
  for (i in 1:p)
    for (j in 1:p)
      for (ii in 1:4)
        for (jj in 1:4)
          if ((ii+jj) %% 2 == 0) {
            xx <- rep(0,p)
            xx[i] <- xx[i]+(ii-1)
            xx[j] <- xx[j]+(jj-1)
            S[i,j] <- S[i,j] + abcd[i,ii]*abcd[j,jj]*
              evaluate(callmultmoments(xx),siglower)
          }
  V <- solve(S)
  V
}

gauss_skew <- function(Astore,p,sig,para) {
  # para为(p*3)维的向量
  A <- array(0,c(p,p,p))
  bcd <- matrix(para, nrow = p, ncol = 3,byrow = TRUE)
  abcd <- cbind(-bcd[,2],bcd)
  V <- gauss_v(p,sig,para)
  for (i in 1:p)
    for (j in 1:p)
      for (k in 1:p)
        if (identical( c(i,j,k), sort(c(i,j,k)) )) {
          for (ii in 1:4)
            for (jj in 1:4)
              for (kk in 1:4)
                if ((ii+jj+kk) %% 2 == 1) {
                  xx <- rep(0,p)
                  xx[i] <- xx[i]+(ii-1)
                  xx[j] <- xx[j]+(jj-1)
                  xx[k] <- xx[k]+(kk-1)
                  A[i,j,k] <- A[i,j,k] + abcd[i,ii]*abcd[j,jj]*abcd[k,kk]*Astore[todeci(xx)+1]
                }
        } else {
          st <- sort(c(i,j,k))
          A[i,j,k] = A[st[1],st[2],st[3]]
        }
  skew <- 0
  for (i in 1:p)
    for (j in 1:p)
      for (i1 in 1:p)
        for (j1 in 1:p)
          for (i2 in 1:p)
            for (j2 in 1:p)
              skew <- skew + V[i,j]*V[i1,j1]*V[i2,j2]* 
    A[i,i1,i2]*A[j,j1,j2]
  return(skew)
}

gauss_kurt <- function(Astore,p,sig,para) {
  A <- array(0,c(p,p,p,p))
  bcd <- matrix(para, nrow = p, ncol = 3,byrow = TRUE)
  abcd <- cbind(-bcd[,2],bcd)
  V <- gauss_v(p,sig,para)
  for (i in 1:p)
    for (j in 1:p)
      for (k in 1:p)
        for (l in 1:p)
          if (identical( c(i,j,k,l), sort(c(i,j,k,l)) )) {
            for (ii in 1:4)
              for (jj in 1:4)
                for (kk in 1:4)
                  for (ll in 1:4)
                    if ((ii+jj+kk+ll) %% 2 == 0) {
                      xx <- rep(0,p)
                      xx[i] <- xx[i]+(ii-1)
                      xx[j] <- xx[j]+(jj-1)
                      xx[k] <- xx[k]+(kk-1)
                      xx[l] <- xx[l]+(ll-1)
                      A[i,j,k,l] <- A[i,j,k,l] + abcd[i,ii]*abcd[j,jj]*abcd[k,kk]*abcd[l,ll]*Astore[todeci(xx)+1]
                    }
          } else {
            st <- sort(c(i,j,k,l))
            A[i,j,k,l] = A[st[1],st[2],st[3],st[4]]
          }
  kurt <- 0
  for (i in 1:p)
    for (j in 1:p)
      for (i1 in 1:p)
        for (j1 in 1:p)
          kurt <- kurt + V[i,j]*V[i1,j1]*A[i,i1,j,j1]
  return(kurt)
}

optimtarget_gauss <- function(x, a){
  ##Revised Fleishman method
  g1 = a[[1]][1]
  g2 = a[[1]][2]
  p = a[[1]][3]
  sig = a[[2]]
  Astore <- a[[3]]
  bcd <- matrix(x,nrow=p,ncol=3,byrow=TRUE)
  b = bcd[,1]
  c = bcd[,2]
  d = bcd[,3]
  z = 
    sum((1 - (b^2+2*c^2+6*b*d+15*d^2))^2) +
    (g1 - gauss_skew(Astore,p,sig,x))^2 +
    (g2 - gauss_kurt(Astore,p,sig,x))^2
}


findcoe_gauss = function(canshu,initial){
  output = optim(initial,optimtarget_gauss,a = canshu,method = "BFGS",
                 control = list(ndeps = rep(1e-10, 3*p),reltol = 1e-10,maxit = 1e8))$par
  return(output)
}  

sig=matrix(c(1,0,0,1),2,2)
Astore=...
a = list(c(ms=3,mk=9,p),sig,Astore)
bcd = findcoe_gauss(a,initial)
bcd # 1.027818773 -0.374449626 -0.064849915  1.331519616  0.005168584 -0.127076746
gauss_skew(Astore,p,sig,bcd)    # 2.571797
gauss_kurt(Astore,p,sig,bcd)    # 9.310727

