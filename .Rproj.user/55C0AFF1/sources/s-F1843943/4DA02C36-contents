---
title: "Mardia non-normal tools"
author: "Zhang Jin 20007"
date: "2020/12/18"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Mardia non-normal tools}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Overview

__StatComp20007__ is a simple R package containing my homeworks and some simple functions dealing with non-normal random numbers generated from Gauss copulas. For my homeworks, please see the other vignette, and this vignette is an introduction of the functions beyond my homeworks.  

This package includes these functions:

_mardias_: A simplified display of the sample Mardia multivariate skewness and kurtosis of a given n*p multivariate sample.

_mstore_: This function can calculate some of the exact high/multivariate moments of a given zero-mean p-dimension multivariate normal distribution using Isserlis Theorem. The result was flattened into an vector instead of a p-dimension array.

_gauss_skew_: This function can calculate the exact Mardia multivariate skewness, given the p-dimension Gaussian generator and the parameters for Fleishman's power method.

_gauss_kurt_: This function can calculate the exact Mardia multivariate kurtosis, given the p-dimension Gaussian generator and the parameters for Fleishman's power method.

_gaussnonr_: This function can generate multivariate data with pre-specified multivariate skewness, kurtosis, covariance matrix and Gaussian generator.


## _mardias_

```{r include=FALSE}
mardias <- function(x, na.rm = TRUE){    
  if (na.rm)
    x <- na.omit(x)
  n <- dim(x)[1]
  p <- dim(x)[2]
  
  x <- scale(x, scale = FALSE)
  S <- cov(x)*(n-1)/n
  S.inv <- MASS::ginv(S)
  D <- x %*% S.inv %*% t(x)
  b1p <- sum(D^3)/n^2
  b2p <- sum(diag(D^2))/n
  return(c(b1p,b2p))
} 
```

For any multivariate normal distribution, the Mardia skewness = 0, and the Mardia kurtosis = p(p+2). Now let's check this property of $p=3$ by using our function _mardias_.

```{r}
set.seed(1)
library(MASS)
x <- mvrnorm(1000,c(1,2,3),matrix(c(4,0.7,0.3,0.7,2,1.4,0.3,1.4,5),nrow=3,ncol=3))
mardias(x)
```

The result is 0.02 and 14.91, which is reasonable. 

## _mstore_

```{r include=FALSE}
library(symmoments)
mstore <- function(p,sig) {
  siglower <- sig[lower.tri(sig,diag=TRUE)]
  decito13 <- function(n,p){
    result <- rep(0,p)
    temp <- n
    for (i in 1:(p-1)){
      result[i] <- temp %/% (13^(p-i))
      temp <- temp-(13^(p-1)*result[i])
    }
    result[p] <- n %% 13
    return(result)
  }
  todeci <- function(a){
    p <- length(a)
    f <- rep(0,p)
    for (i in 1:p) 
      f[i] <- 13^(p-i)
    return(sum(a*f))
  }
  Astore <- rep(0,13^p)
  for (i in 0:(13^p-1)) {
    comb <- decito13(i,p)
    combsum <- sum(comb)
    if ((combsum<=12) & (combsum %% 2 == 0))
      Astore[i+1] <- evaluate(callmultmoments(comb),siglower)
  }
  Astore
}
```

For example, if there are two zero-mean normal random variables $X_1,X_2$ which obey a MVN(c(0,0),c(2,0.7,0.7,1)), then we could calculate the moments as

```{r}
p <- 2
sig <- matrix(c(2,0.7,0.7,1),2,2)
A <- mstore(p,sig)
matrix(A,13,13)
```

The (i,j) entry indicates the value of $E[X_1^{i-1}  X_2^{j-1}]$, where (i-1)+(j-1) <= 12.

## _gauss_skew_ and _gauss_kurt_

```{r include=FALSE}
decito13 <- function(n,p){
    result <- rep(0,p)
    temp <- n
    for (i in 1:(p-1)){
      result[i] <- temp %/% (13^(p-i))
      temp <- temp-(13^(p-1)*result[i])
    }
    result[p] <- n %% 13
    return(result)
  }

todeci <- function(a){
    p <- length(a)
    f <- rep(0,p)
    for (i in 1:p) 
      f[i] <- 13^(p-i)
    return(sum(a*f))
  }

gauss_v <- function(p,sig,b,c,d) {
    S <- matrix(0,p,p)
    a <- -c    # SCALE
    abcd <- c(a,b,c,d)
    siglower <- sig[lower.tri(sig,diag=TRUE)]
    for (i in 1:p)
      for (j in 1:p)
        for (ii in 1:4)
          for (jj in 1:4)
            if ((ii+jj) %% 2 == 0) {
              xx <- rep(0,p)
              xx[i] <- xx[i]+(ii-1)
              xx[j] <- xx[j]+(jj-1)
              S[i,j] <- S[i,j] + abcd[ii]*abcd[jj]*
                evaluate(callmultmoments(xx),siglower)
            }
    V <- solve(S)
    V
  }

gauss_skew <- function(p,sig,b,c,d) {
    Astore <- mstore(p,sig)
    A <- array(0,c(p,p,p))
    a <- -c
    abcd <- c(a,b,c,d)
    V <- gauss_v(p,sig,b,c,d)
    for (i in 1:p)
      for (j in 1:p)
        for (k in 1:p)
          if (identical( c(i,j,k), sort(c(i,j,k)) )) {
            for (ii in 1:4)
              for (jj in 1:4)
                for (kk in 1:4)
                  if ((ii+jj+kk) %% 2 == 1) {
                    xx <- rep(0,p)
                    xx[i] <- xx[i]+(ii-1)
                    xx[j] <- xx[j]+(jj-1)
                    xx[k] <- xx[k]+(kk-1)
                    A[i,j,k] <- A[i,j,k] + abcd[ii]*abcd[jj]*abcd[kk]*Astore[todeci(xx)+1]
                  }
          } else {
            st <- sort(c(i,j,k))
            A[i,j,k] = A[st[1],st[2],st[3]]
          }
    skew <- 0
    for (i in 1:p)
      for (j in 1:p)
        for (i1 in 1:p)
          for (j1 in 1:p)
            for (i2 in 1:p)
              for (j2 in 1:p)
                skew <- skew + V[i,j]*V[i1,j1]*V[i2,j2]* 
      A[i,i1,i2]*A[j,j1,j2]
    return(skew)
  }
  
  gauss_kurt <- function(p,sig,b,c,d) {
    Astore <- mstore(p,sig)
    A <- array(0,c(p,p,p,p))
    a <- -c
    abcd <- c(a,b,c,d)
    V <- gauss_v(p,sig,b,c,d)
    for (i in 1:p)
      for (j in 1:p)
        for (k in 1:p)
          for (l in 1:p)
            if (identical( c(i,j,k,l), sort(c(i,j,k,l)) )) {
              for (ii in 1:4)
                for (jj in 1:4)
                  for (kk in 1:4)
                    for (ll in 1:4)
                      if ((ii+jj+kk+ll) %% 2 == 0) {
                        xx <- rep(0,p)
                        xx[i] <- xx[i]+(ii-1)
                        xx[j] <- xx[j]+(jj-1)
                        xx[k] <- xx[k]+(kk-1)
                        xx[l] <- xx[l]+(ll-1)
                        A[i,j,k,l] <- A[i,j,k,l] + abcd[ii]*abcd[jj]*abcd[kk]*abcd[ll]*Astore[todeci(xx)+1]
                      }
            } else {
              st <- sort(c(i,j,k,l))
              A[i,j,k,l] = A[st[1],st[2],st[3],st[4]]
            }
  kurt <- 0
  for (i in 1:p)
    for (j in 1:p)
      for (i1 in 1:p)
        for (j1 in 1:p)
          kurt <- kurt + V[i,j]*V[i1,j1]*A[i,i1,j,j1]
  return(kurt)
  }
```

For example, if there are two zero-mean normal random variables $X=(X_1,X_2)$ which obey a MVN(c(0,0),c(1,0.7,0.7,1)).  

If we consider $bX+cX^2+dX^3$, we could obtain the exact Mardia multivariate skewness and kurtosis by these two functions. Take $X+2X^2+3X^3$ for an example, where $b=1,~c=2,~d=3$

```{r}
p <- 2
sig <- matrix(c(1,0.7,0.7,1),2,2)
b <- 1
c <- 2
d <- 3
gauss_skew(p,sig,b,c,d)
gauss_kurt(p,sig,b,c,d)
```

## _gaussnonr_

```{r include=FALSE}
library(MASS)
library(expm)
gaussnonr <- function(p,n,ms,mk,sig,Sigma,initial=NULL) {
  
  if (is.null(initial))
    initial <- c(0.9, 0.4, 0)
  siglower <- sig[lower.tri(sig,diag=TRUE)]
  
  decito13 <- function(n,p){
    result <- rep(0,p)
    temp <- n
    for (i in 1:(p-1)){
      result[i] <- temp %/% (13^(p-i))
      temp <- temp-(13^(p-1)*result[i])
    }
    result[p] <- n %% 13
    return(result)
  }
  
  todeci <- function(a){
    p <- length(a)
    f <- rep(0,p)
    for (i in 1:p) 
      f[i] <- 13^(p-i)
    return(sum(a*f))
  }
  
  Astore <- rep(0,13^p)
  for (i in 0:(13^p-1)) {
    comb <- decito13(i,p)
    combsum <- sum(comb)
    if ((combsum<=12) & (combsum %% 2 == 0))
      Astore[i+1] <- evaluate(callmultmoments(comb),siglower)
  }
  
  gauss_v <- function(p,sig,b,c,d) {
    S <- matrix(0,p,p)
    a <- -c    # SCALE
    abcd <- c(a,b,c,d)
    siglower <- sig[lower.tri(sig,diag=TRUE)]
    for (i in 1:p)
      for (j in 1:p)
        for (ii in 1:4)
          for (jj in 1:4)
            if ((ii+jj) %% 2 == 0) {
              xx <- rep(0,p)
              xx[i] <- xx[i]+(ii-1)
              xx[j] <- xx[j]+(jj-1)
              S[i,j] <- S[i,j] + abcd[ii]*abcd[jj]*
                evaluate(callmultmoments(xx),siglower)
            }
    V <- solve(S)
    V
  }
  
  gauss_skew <- function(Astore,p,sig,b,c,d) {
    A <- array(0,c(p,p,p))
    a <- -c
    abcd <- c(a,b,c,d)
    V <- gauss_v(p,sig,b,c,d)
    for (i in 1:p)
      for (j in 1:p)
        for (k in 1:p)
          if (identical( c(i,j,k), sort(c(i,j,k)) )) {
            for (ii in 1:4)
              for (jj in 1:4)
                for (kk in 1:4)
                  if ((ii+jj+kk) %% 2 == 1) {
                    xx <- rep(0,p)
                    xx[i] <- xx[i]+(ii-1)
                    xx[j] <- xx[j]+(jj-1)
                    xx[k] <- xx[k]+(kk-1)
                    A[i,j,k] <- A[i,j,k] + abcd[ii]*abcd[jj]*abcd[kk]*Astore[todeci(xx)+1]
                  }
          } else {
            st <- sort(c(i,j,k))
            A[i,j,k] = A[st[1],st[2],st[3]]
          }
    skew <- 0
    for (i in 1:p)
      for (j in 1:p)
        for (i1 in 1:p)
          for (j1 in 1:p)
            for (i2 in 1:p)
              for (j2 in 1:p)
                skew <- skew + V[i,j]*V[i1,j1]*V[i2,j2]* 
      A[i,i1,i2]*A[j,j1,j2]
    return(skew)
  }
  
  gauss_kurt <- function(Astore,p,sig,b,c,d) {
    A <- array(0,c(p,p,p,p))
    a <- -c
    abcd <- c(a,b,c,d)
    V <- gauss_v(p,sig,b,c,d)
    for (i in 1:p)
      for (j in 1:p)
        for (k in 1:p)
          for (l in 1:p)
            if (identical( c(i,j,k,l), sort(c(i,j,k,l)) )) {
              for (ii in 1:4)
                for (jj in 1:4)
                  for (kk in 1:4)
                    for (ll in 1:4)
                      if ((ii+jj+kk+ll) %% 2 == 0) {
                        xx <- rep(0,p)
                        xx[i] <- xx[i]+(ii-1)
                        xx[j] <- xx[j]+(jj-1)
                        xx[k] <- xx[k]+(kk-1)
                        xx[l] <- xx[l]+(ll-1)
                        A[i,j,k,l] <- A[i,j,k,l] + abcd[ii]*abcd[jj]*abcd[kk]*abcd[ll]*Astore[todeci(xx)+1]
                      }
            } else {
              st <- sort(c(i,j,k,l))
              A[i,j,k,l] = A[st[1],st[2],st[3],st[4]]
            }
  kurt <- 0
  for (i in 1:p)
    for (j in 1:p)
      for (i1 in 1:p)
        for (j1 in 1:p)
          kurt <- kurt + V[i,j]*V[i1,j1]*A[i,i1,j,j1]
  return(kurt)
  }
  
  optimtarget_gauss <- function(x, a){
    ##Revised Fleishman method
    b = x[1]
    c = x[2]
    d = x[3]
    g1 = a[[1]][1]
    g2 = a[[1]][2]
    p = a[[1]][3]
    sig = a[[2]]
    Astore <- a[[3]]
    z = 
      (1 - (b^2+2*c^2+6*b*d+15*d^2))^2 +
      (g1 - gauss_skew(Astore,p,sig,b,c,d))^2 +
      (g2 - gauss_kurt(Astore,p,sig,b,c,d))^2
  }
  
  findcoe_gauss = function(canshu,initial){
    ##
    #Uses the built in minimization function to solve for b, c, and d#
    # if the third and fourth moment of ksi are given.
    ##
    output = optim(initial,optimtarget_gauss,a = canshu,method = "BFGS",
                   control = list(ndeps = rep(1e-10, 3),reltol = 1e-10,maxit = 1e8))$par
    
    return(output)
  }
  
  a = list(c(ms,mk,p),sig,Astore)
  bcd = findcoe_gauss(a,initial)
  Z = mvrnorm(n,rep(0,p),sig)
  b = bcd[1]
  c = bcd[2]
  d = bcd[3]
  xi = -c+b*Z+c*Z^2+d*Z^3
  V = gauss_v(p,sig,b,c,d)
  V_h = sqrtm(V)
  eta = matrix(0, nrow = n, ncol = p)
  for (j in 1:n){
    for(m in 1:p){
      for(i in 1:p){
        eta[j,m] = eta[j,m] + V_h[i,m] * xi[j,i]}}}
  #  eta = V_h %*% t(xi)
  x = matrix(0, nrow = n, ncol = p)
  r = chol(Sigma)
  
  for (j in 1:n){
    for(m in 1:p){
      for(i in 1:p){
        x[j,m] = x[j,m] + r[i,m] * eta[j,i]}}}
  #  x = t(r %*% eta)
  return(x)
}
```

This function can generate non-normal random numbers with desired Mardia skewness and kurtosis. The usage of this function is like:

```{r eval=FALSE}
set.seed(1)
p <- 2    # dimension
n <- 10000    # sample size
ms <- 3    # skewness
mk <- 20    # kurtosis
sig <- matrix(c(1,0.7,0.7,1),2,2)    # sig - p*p Multivariate normal covariance matrix 
Sigma <- matrix(c(1,0.5,0.5,1),2,2)    # Sigma - p*p Desired result covariance matrix
x <- gaussnonr(p,n,ms,mk,sig,Sigma,initial=NULL)
```
